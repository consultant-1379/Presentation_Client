/*------------------------------------------------------------------------------
 *******************************************************************************
 * COPYRIGHT Ericsson 2012
 *
 * The copyright to the computer program(s) herein is the property of
 * Ericsson Inc. The programs may be used and/or copied only with written
 * permission from Ericsson Inc. or in accordance with the terms and
 * conditions stipulated in the agreement/contract under which the
 * program(s) have been supplied.
 *******************************************************************************
 *----------------------------------------------------------------------------*/
package com.ericsson.nms.pres.testWare.test.cases;

import org.testng.annotations.Test;

import com.ericsson.cifwk.taf.TestCase;
import com.ericsson.cifwk.taf.TorTestCaseHelper;
import com.ericsson.cifwk.taf.annotations.Context;
import com.ericsson.cifwk.taf.annotations.VUsers;
import com.ericsson.cifwk.taf.data.Host;
import com.ericsson.nms.pres.testWare.operators.RestToolExampleOperator;
import com.ericsson.nms.pres.testWare.test.data.RestToolExampleData;

/*
 * Comments added for the purpose of showing data and logic flow are marked as comment, not javadoc
 * Javadoc comments are part of the original code
 *
 * Test Case class is describing the sequence and scope of verification logic
 * It's content is mainly generated from AVS service
 * Added part should be as minimal as possible and should contain:
 * - interaction between test cases
 * - usage of test data
 * - verification and reporting logic
 * 
 *  Shape of this class determines output on test report.
 * 
 * Please note superclass is TorTestCaseHelper that provides reporting utilities
 * and it is marked with TestCase interface used as a marker only  
 */
public class RestToolExample extends TorTestCaseHelper implements TestCase{
	/*
	 * Operator is the point of contact to "operate" - execute business actions on the tested functionality
	 * It also provides expected results
	 */
	RestToolExampleOperator restToolExampleOperator = new RestToolExampleOperator();
	
	/*
	 * Example below is used to test if it is possible to execute authorized call to JIRA service
	 * Test data for this test case area:
	 * - Host that contain JIRA service
	 * - user name and password to be used for authenticating during actual call invocation
	 * These arguments are received from TestData specified as combination of class RestToolExampleData.class and id "AuthorisationTestData"
	 *
	 * All javadoc and annotations are generated by AVS
	 * Please note that both VUsers and Context are accepting arrays. It means that test case will be executed in all combinations of all
	 * values. Exception is UI context as it can be used with 1 parallel user only 
	 * Groups is a powerful mechanism allowing to tag test cases for reuse and isolated execution
	 * Test Case below will be part of smoke tests, but also used in R&V workflow and GAT executions
	 * 
	 * The test method should be short and simple - usually below 4 lines of non-reporting code (with optimum of one comparison line)
	 */
	
	/**
	 * Verify JIRA service requires authentication for the calls 
	 * @DESCRIPTION Goal of the test case is to verify that JIRA service is preventing access when incorrect credentials are passed
	 * and allowing to get data if proper credentials are passed
	 * @PRIORITY MEDIUM
	 * @GROUP Smoke, GAT, RV_WORKFLOW
	 * @VUsers 1,5
	 * @Context Rest
	*/
	@VUsers(vusers = {1,5})
	@Context(context={Context.REST})
	@Test(groups={"Smoke","GAT","RV_WORKFLOW"},dataProvider = "AuthorisationTestData", dataProviderClass = RestToolExampleData.class)
	public void authorisedRestCall(Host restServer, String userName, String password) {
		/*
		 *Good practice is to improve default reporting by adding the test data parameters to setTestCase description
		 */
		setTestCase("TC_ID_FROM_AVS", "Authorised call on" + restServer + " using user: " + userName + " and pass: " + password);
		
		/*
		 * Set test step methods below are generated from AVS as specified in test case EXECUTE and VERIFY steps
		 * In example below it would be useful to combine them to one method instead of 2:
		 * setTestStep("Execute authorised call to JIRA service and verify call result is as expected")
		 */
		setTestStep("Execute authorised call to JIRA service");
		setTestStep("Verify call result is as expected");
		
		/*
		 * Recommendation is to use comparison of 2 calculated values on this level
		 * It improves reporting and troubleshooting if test case fails
		 * It is discouraged to use assertTrue or comparison to literals, as it means only operations
		 * returning positive values can be tested this way 
		 */
		assertEquals(restToolExampleOperator.executeAuthorisedCall(restServer,userName,password),
				restToolExampleOperator.expectedResultOfAuthorisedCall(userName,password));
	}
}